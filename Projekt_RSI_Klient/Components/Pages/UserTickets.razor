@page "/my-tickets"
@using FlightsData
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>My Booked Flights</PageTitle>
<h1>My Booked Flights</h1>

<div class="form-group">
    <label for="email">Enter your email to see booked flights:</label>
    <input type="email" id="email" class="form-control" @bind="userEmail" />
</div>
<button class="btn btn-primary" @onclick="LoadUserFlights">Get Booked Flights</button>

@if (flightsLoaded)
{
    <table class="table" style="margin-top: 20px;">
        <thead>
            <tr>
                <th>Flight Number</th>
                <th>City From</th>
                <th>City To</th>
                <th>Day</th>
                <th>Time</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @if (userFlights.Any())
            {
                @foreach (var flight in userFlights)
                {
                    <tr>
                        <td>@flight.flightNumber</td>
                        <td>@flight.cityFrom</td>
                        <td>@flight.cityTo</td>
                        <td>@flight.day</td>
                        <td>@flight.time</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => DownloadTicketPdf(flight.flightNumber)">Download PDF</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6">No flights found for the provided email.</td>
                </tr>
            }
        </tbody>
    </table>
}
else if (loading)
{
    <p>Loading...</p>
}

@code {
    private string userEmail;
    private List<flight> userFlights = new List<flight>();
    private bool flightsLoaded = false;
    private bool loading = false;

    private async Task LoadUserFlights()
    {
        if (string.IsNullOrWhiteSpace(userEmail))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a valid email.");
            return;
        }

        try
        {
            loading = true;
            flightsLoaded = false;
            userFlights.Clear();

            var client = new FlightServiceClient();
            var response = await client.getBookedFlightsByPassengerEmailAsync(userEmail);

            if (response?.@return != null)
            {
                userFlights = response.@return.ToList();
                flightsLoaded = true;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "No flights found for the provided email.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task DownloadTicketPdf(string flightNumber)
    {
        try
        {
            var client = new FlightServiceClient();
            var response = await client.getTicketPdfAsync(userEmail, flightNumber);

            if (response?.@return != null)
            {
                var pdfBytes = response.@return;
                var fileName = $"ticket_{flightNumber}.pdf";

                await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(pdfBytes));
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to retrieve the ticket PDF.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"An error occurred while downloading the PDF: {ex.Message}");
        }
    }
}
